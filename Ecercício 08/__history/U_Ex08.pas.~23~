unit U_Ex08;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TPessoa = class
    nome: string;
  end;

  TCelula = class
    Item: TPessoa;
    Prox: TCelula;
  end;

  TPilha = class
  private
    function CreateCel: TCelula;
  public
    Head: TCelula;
    procedure CreateHead;
    procedure Clear; // Apaga todos os itens da pilha
    constructor Create;
    destructor Destroy; override;
    procedure StackUp(Item: TPessoa);
    function Unstack: TPessoa;
    function Count: Integer;
    procedure OrdenarDecrescente; // Ordena a pilha em ordem decrescente
  end;

  TFormEx08 = class(TForm)
    Pilha: TListBox;
    btnInserir: TButton;
    edtItem: TEdit;
    procedure btnInserirClick(Sender: TObject);
  private
    PilhaDados: TPilha; // Declaração da pilha de dados
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

var
  FormEx08: TFormEx08;

implementation

{$R *.dfm}

function TPilha.CreateCel: TCelula;
var
  Cel: TCelula;
begin
  Cel := TCelula.Create;
  Cel.Item := nil;
  Cel.Prox := nil;
  Result := Cel;
end;

function TPilha.Count: Integer;
var
  i: Integer;
  Cel: TCelula;
begin
  Cel := Self.Head.Prox;
  i := 0;
  while Cel <> nil do
  begin
    i := i + 1;
    Cel := Cel.Prox;
  end;
  Result := i;
end;

constructor TPilha.Create;
begin
  inherited;
  CreateHead;
end;

destructor TPilha.Destroy;
begin
  Clear;
  Self.Head.Destroy;
  inherited;
end;

procedure TPilha.Clear;
var
  Pessoa: TPessoa;
begin
  while Self.Head.Prox <> nil do
  begin
    Pessoa := Unstack;
    Pessoa.Destroy;
  end;
end;

procedure TPilha.CreateHead;
begin
  Self.Head := CreateCel;
end;

procedure TPilha.StackUp(Item: TPessoa);
var
  Cel: TCelula;
begin
  Cel := CreateCel;
  Cel.Item := Item;
  Cel.Prox := Self.Head.Prox;
  Self.Head.Prox := Cel;
end;

function TPilha.Unstack: TPessoa;
var
  Cel: TCelula;
begin
  Cel := Self.Head.Prox;
  Self.Head.Prox := Cel.Prox;
  Result := Cel.Item;
  Cel.Destroy;
end;

procedure TPilha.OrdenarDecrescente;
var
  Atual, Proximo: TCelula;
  Trocou: Boolean;
  Temp: TPessoa;
begin
  Atual := Head.Prox;
  while Atual <> nil do
  begin
    Proximo := Atual.Prox;
    Trocou := False;
    while Proximo <> nil do
    begin
      if StrToInt(Proximo.Item.nome) > StrToInt(Atual.Item.nome) then
      begin
        Temp := Atual.Item;
        Atual.Item := Proximo.Item;
        Proximo.Item := Temp;
        Trocou := True;
      end;
      Proximo := Proximo.Prox;
    end;
    if not Trocou then
      Break;
    Atual := Atual.Prox;
  end;
end;

constructor TFormEx08.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  PilhaDados := TPilha.Create; // Inicializa a pilha de dados
end;

destructor TFormEx08.Destroy;
begin
  PilhaDados.Destroy; // Libera a memória da pilha de dados
  inherited Destroy;
end;

procedure TFormEx08.btnInserirClick(Sender: TObject);
var
  Item: TPessoa;
begin
  Item := TPessoa.Create;
  Item.nome := edtItem.Text;
  PilhaDados.StackUp(Item); // Insere o item na pilha de dados

  // Ordena a pilha em ordem decrescente
  PilhaDados.OrdenarDecrescente;

  // Atualiza a exibição da pilha na ListBox
  Pilha.Items.Clear;
  while PilhaDados.Count > 0 do
  begin
    Item := PilhaDados.Unstack;
    Pilha.Items.Add(Item.nome);
    Item.Destroy;
  end;
end;

end.
